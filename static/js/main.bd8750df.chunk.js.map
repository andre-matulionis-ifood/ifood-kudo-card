{"version":3,"sources":["kudo.module.scss","option-list.jsx","kudo.jsx","kudo-manager.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","OptionList","lang","dataName","onChange","options","React","useMemo","optionsData","map","id","label","labels","handleIdChange","selectedId","selectedOption","find","o","e","target","value","key","Kudo","typeId","typeLabel","message","kudoRef","useRef","onClick","a","async","html2canvas","current","toBlob","blob","saveAs","className","style","main","ref","header","KudoManager","useState","setMessage","type","setType","App","setLang","Helmet","href","rel","lng","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,QAAU,wB,wGCErE,SAASC,EAAT,GAAmD,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC7CC,EAAUC,IAAMC,SACpB,kBACEC,EAAYL,GAAUM,KAAI,kBAAqB,CAC7CC,GADwB,EAAGA,GAE3BC,MAFwB,EAAOC,OAEjBV,SAElB,CAACA,EAAMC,IAGT,SAASU,EAAeC,GACtB,IAAMC,EAAiBP,EAAYL,GAAUa,MAAK,SAAAC,GAAC,OAAIA,EAAEP,KAAOI,KAChEV,EAASW,GAGX,OACE,4BAAQX,SAAU,SAAAc,GAAC,OAAIL,EAAeK,EAAEC,OAAOC,SAC5Cf,EAAQI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACX,4BAAQU,IAAKX,EAAIU,MAAOV,GACrBC,O,6DCVI,SAASW,EAAT,GAA8C,EAA9BC,OAA+B,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAC1CC,EAAUpB,IAAMqB,SAWtB,OACE,6BACE,4BAAQC,QAXZ,WACI,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACqBE,IAAYL,EAAQM,UADzC,cAEOC,QAAO,SAAAC,GACZC,iBAAOD,EAAM,eAHf,uCAUA,UACA,yBAAKE,UAAWC,IAAMC,KAAMC,IAAKb,GAC/B,wBAAIU,UAAWC,IAAMG,QAAShB,GAC9B,yBAAKY,UAAWC,IAAMZ,SAAUA,KCzBzB,SAASgB,EAAT,GAAgC,IAATvC,EAAQ,EAARA,KAAQ,EACdI,IAAMoC,SAAS,IADD,mBACrCjB,EADqC,KAC5BkB,EAD4B,OAEpBrC,IAAMoC,SAAS,MAFK,mBAErCE,EAFqC,KAE/BC,EAF+B,KAI5C,OACE,6BACE,kBAAC5C,EAAD,CACEC,KAAMA,EACNC,SAAS,aACTC,SAAU,SAAAgB,GAAK,OAAIyB,EAAQzB,MAE7B,8BAAUhB,SAAU,SAAAc,GAAC,OAAIyB,EAAWzB,EAAEC,OAAOC,UAC7C,kBAACE,EAAD,CACEC,OAAQqB,GAAQA,EAAKlC,GACrBc,UAAWoB,GAAQA,EAAKhC,OAAOV,GAC/BuB,QAASA,KCOFqB,MArBf,WAAgB,IAAD,EACWxC,IAAMoC,SAAS,CAAEhC,GAAI,OADhC,mBACNR,EADM,KACA6C,EADA,KAGb,OACE,yBAAKX,UAAU,OACb,kBAACY,EAAA,OAAD,KACE,0BACEC,KAAK,6DACLC,IAAI,gBAGR,kBAACjD,EAAD,CACEE,SAAS,OACTD,KAAMA,EAAKQ,GACXN,SAAU,SAAA+C,GAAG,OAAIJ,EAAQI,MAE3B,kBAACV,EAAD,CAAavC,KAAMA,EAAKQ,OCTV0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bd8750df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"kudo_main__37QJn\",\"header\":\"kudo_header__3wGdN\",\"message\":\"kudo_message__3vMD7\"};","import React from 'react'\nimport optionsData from './options-data.json'\n\nexport default function OptionList({ lang, dataName, onChange }) {\n  const options = React.useMemo(\n    () =>\n      optionsData[dataName].map(({ id, labels }) => ({\n        id,\n        label: labels[lang]\n      })),\n    [lang, dataName]\n  )\n\n  function handleIdChange(selectedId) {\n    const selectedOption = optionsData[dataName].find(o => o.id === selectedId)\n    onChange(selectedOption)\n  }\n\n  return (\n    <select onChange={e => handleIdChange(e.target.value)}>\n      {options.map(({ id, label }) => (\n        <option key={id} value={id}>\n          {label}\n        </option>\n      ))}\n    </select>\n  )\n}\n","import React from 'react'\nimport pt from 'prop-types'\nimport html2canvas from 'html2canvas'\nimport { saveAs } from 'file-saver'\nimport style from './kudo.module.scss'\n\nconst propTypes = {\n  typeId: pt.string,\n  typeLabel: pt.string,\n  message: pt.string\n}\n\nexport default function Kudo({ typeId, typeLabel, message }) {\n  const kudoRef = React.useRef()\n\n  function onSaveClick() {\n    ;(async () => {\n      const canvas = await html2canvas(kudoRef.current)\n      canvas.toBlob(blob => {\n        saveAs(blob, 'kudo.png')\n      })\n    })()\n  }\n\n  return (\n    <div>\n      <button onClick={onSaveClick}>Salvar</button>\n      <div className={style.main} ref={kudoRef}>\n        <h1 className={style.header}>{typeLabel}</h1>\n        <div className={style.message}>{message}</div>\n      </div>\n    </div>\n  )\n}\n\nKudo.propTypes = propTypes\n","import React from 'react'\nimport OptionList from './option-list'\nimport Kudo from './kudo'\n\nexport default function KudoManager({ lang }) {\n  const [message, setMessage] = React.useState('')\n  const [type, setType] = React.useState(null)\n\n  return (\n    <div>\n      <OptionList\n        lang={lang}\n        dataName='kudo-types'\n        onChange={value => setType(value)}\n      />\n      <textarea onChange={e => setMessage(e.target.value)}></textarea>\n      <Kudo\n        typeId={type && type.id}\n        typeLabel={type && type.labels[lang]}\n        message={message}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport OptionList from './option-list'\nimport KudoManager from './kudo-manager'\n\nfunction App() {\n  const [lang, setLang] = React.useState({ id: 'br' })\n\n  return (\n    <div className='App'>\n      <Helmet>\n        <link\n          href='https://fonts.googleapis.com/css?family=Kalam&display=swap'\n          rel='stylesheet'\n        />\n      </Helmet>\n      <OptionList\n        dataName='lang'\n        lang={lang.id}\n        onChange={lng => setLang(lng)}\n      />\n      <KudoManager lang={lang.id} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}